---
import "../styles/global.css";

import Card from "../components/Card.astro";
import Background from "../components/Background.astro";

import { ClientRouter } from "astro:transitions";

// import { fetchSpotifyToken, fetchRandomTrack } from "../scripts/spotify-api";

// const token = await fetchSpotifyToken();
// const randomSong = await fetchRandomTrack(token);

// in-memory cache for Spotify data
const cache: { data: any; expiry: number | null } = {
    data: null,
    expiry: null,
};

// fetch Spotify data with caching
const fetchSpotifyData = async () => {
    const apiURL = import.meta.env.PUBLIC_SPOTIFY_API;

    // check if the cache is valid
    const now = Date.now();
    if (cache.data && cache.expiry && now < cache.expiry) {
        return cache.data;
    }

    try {
        const response = await fetch(apiURL, { cache: "no-store" });
        if (!response.ok) throw new Error("Failed to fetch Spotify data");

        const data = await response.json();

        // cahce the data for 1 hour (3600000 ms)
        cache.data = data;
        cache.expiry = now + 3600000;

        return data;
    } catch {
        return {
            title: "default title",
            album: "default album",
            artist: "default artist",
            explicit: false,
            id: "4cOdK2wGLETKBW3PvgPWqT",
            coverURL: "/fallback.png",
        };
    }
};

// Fetch data during SSR
const { title, album, artist, explicit, id, coverURL } = await fetchSpotifyData();

interface Props {
    pageTitle: string;
}
---

<!doctype html>
<html lang="en">
    <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link
            href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
            rel="stylesheet"
        />

        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />

        <link rel="icon" type="image/svg+xml" href="/favicon.png" />

        <title>song of the day - {title}</title>
        <meta name="description" content=`${title} - ${album} - ${artist}` />

        <meta content="#fff8ab" data-react-helmet="true" name="theme-color" />
        <meta property="og:title" content=`song of the day - ${title}` />
        <meta
            property="og:description"
            content={`${title} - ${album} by ${artist} :: get cool new songs everyday.`}
        />
        <meta property="og:image" content={coverURL} />
        <meta property="og:type" content="music.song" />

        <ClientRouter />
    </head>
    <body>
        <main class="text-center">
            <Background coverURL={coverURL} />
            <div
                class="p-4 flex flex-col justify-center items-center w-screen h-screen relative"
            >
                <h1
                    class="uppercase sm:text-9xl text-8xl mb-16 w-screen"
                    transition:name="pageTitle"
                >
                    {Astro.props.pageTitle}
                </h1>

                <div class="p-4 w-[36rem] max-w-full min-w-0">
                    <slot />

                    <Card
                        title={title}
                        album={album}
                        artist={artist}
                        explciit={explicit}
                        id={id}
                        coverURL={coverURL}
                    />

                    <p class="mt-8 mb-4" transition:name="navigate">
                        <small>
                            <a href="/">song of the day</a> &CenterDot; <a
                                href="/about">why??</a
                            > &CenterDot;
                            <a href="/how-it-works">how it works</a><br />
                            &copy; 2025 <a href="https://taxevaiden.pages.dev"
                                >taxevaiden</a
                            ></small
                        >
                    </p>
                </div>
            </div>
        </main>
    </body>
</html>
